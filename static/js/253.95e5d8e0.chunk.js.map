{"version":3,"file":"static/js/253.95e5d8e0.chunk.js","mappings":"6JAqBA,IAhBa,SAAHA,GAA4C,IAAvCC,EAAGD,EAAHC,IAAKC,EAAKF,EAALE,MAAOC,EAAIH,EAAJG,KAAMC,EAAIJ,EAAJI,KAAMC,EAAQL,EAARK,SAI/BC,EAAQ,GAAGH,EACZI,IAAQ,EAAI,GAJRC,SAASN,EAAQ,IAILC,EACfM,IAAS,EAAI,IAJVP,EAAQ,IAIMC,EAEvB,OACEO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEN,MAAAA,EAAOO,OAAOP,EAAOQ,QAASV,EAAK,GAAI,EAAGW,UAAU,UAADC,OAAYX,GAAU,EAAE,EAAC,MAAMY,UAC/GP,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEL,IAAAA,EAAKE,KAAAA,EAAMH,MAAO,GAAGH,EAAMU,OAAQ,IAAIV,GACnDe,IAAG,sBAAAF,OAAwBf,EAAG,WAGtC,C,mECeA,IA7BmB,SAAHD,GAAuE,IAADmB,EAAAC,EAAAC,EAAAC,EAAAC,EAAjEtB,EAAGD,EAAHC,IAAKuB,EAAOxB,EAAPwB,QAASC,EAAQzB,EAARyB,SAAUC,EAAK1B,EAAL0B,MAAOC,EAAM3B,EAAN2B,OAAQxB,EAAIH,EAAJG,KAAMC,EAAIJ,EAAJI,KAAMC,EAAQL,EAARK,SAChEuB,EAAQ,GAAKH,EAASnB,MACtBuB,EAAQ,GAAKJ,EAASZ,OAEvBiB,EAAgBN,EAAQlB,MAAMsB,EAC9BG,EAAiBP,EAAQX,OAAOgB,EAEhCG,EAAiBP,EAASnB,MAAMsB,EAChCK,EAAkBR,EAASZ,OAAOgB,EAElCK,EAAkB,QAAXf,EAAQ,OAALO,QAAK,IAALA,OAAK,EAALA,EAAOS,SAAC,IAAAhB,EAAAA,EAAI,EACtBiB,EAAkB,QAAXhB,EAAQ,OAALM,QAAK,IAALA,OAAK,EAALA,EAAOW,SAAC,IAAAjB,EAAAA,EAAI,EAIrBd,GAHuB,QAAde,EAAO,OAAJlB,QAAI,IAAJA,OAAI,EAAJA,EAAMG,aAAK,IAAAe,EAAAA,EAAI,GAGRW,EACnBnB,GAHyB,QAAfS,EAAO,OAAJnB,QAAI,IAAJA,OAAI,EAAJA,EAAMU,cAAM,IAAAS,EAAAA,EAAI,GAGRW,EACrBxB,GAAQyB,EAAQF,EAAeL,EAAOQ,EAAEP,EACzCrB,GAAO6B,EAAQH,EAAgBN,EAAOU,EAAER,EACvCS,EAAuB,QAAjBf,EAAS,OAANI,QAAM,IAANA,OAAM,EAANA,EAAQW,cAAM,IAAAf,EAAAA,EAAI,EAEjC,OACEb,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAOC,MAAO,CAAEN,MAAAA,EAAOO,OAAAA,EAAQC,QAASV,EAAK,GAAI,EAAGW,UAAU,UAADC,OAAYX,GAAU,EAAE,EAAC,aAAAW,OAAYsB,EAAM,SAASrB,UAC9HP,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEL,IAAAA,EAAKE,KAAAA,EAAMH,MAAOwB,EAAejB,OAAQkB,GACrDb,IAAG,wBAAAF,OAA0Bf,EAAG,WAGxC,C,yHC8DA,UApFmB,WACjB,IAAMsC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAWC,EAAAA,EAAAA,MACXC,GAAcC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQH,WAAW,IAC5DI,GAAWH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,WAAWC,KAAK,IACtDC,GAAaN,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,WAAWG,OAAO,IAC1DC,GAAeR,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,WAAWK,QAAQ,IAC7DC,GAAmBV,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQQ,gBAAgB,IAY5E,OACEC,EAAAA,EAAAA,MAAA,OAAK5C,UAAU,eAAcM,SAAA,EAC3BsC,EAAAA,EAAAA,MAAA,OAAAtC,SAAA,EACEP,EAAAA,EAAAA,KAAA,SACE8C,IAAKjB,EACL5B,UAAU,QAEV8C,KAAK,OACLC,OAAO,mBACPC,SAnBiB,SAACC,GACxB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GAEtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdzB,GAAS0B,EAAAA,EAAAA,IAAO,CAAEC,IAAKJ,EAAOK,SAChC,EACAL,EAAOM,WAAWT,EAAqB,QACzC,KAaMnD,EAAAA,EAAAA,KAAA,UAAQC,UAAU,cAAc4D,QAAS,kBAAMhC,GAAaA,EAAUiC,SAAWjC,EAAUiC,QAAQC,OAAO,EAACxD,SAAC,8BAC5GP,EAAAA,EAAAA,KAAA,UAAQC,UAAU,cAAc4D,QAAS,kBAAMG,EAAAA,EAAAA,IAAe,SAAU/B,EAAY,EAAC1B,SAAC,iCAExFP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWM,SAED,IAArBqC,EACEP,GAAYA,EAASqB,KAAI,SAACO,EAAMC,GAAC,OAC/BlE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YACbkE,MAAOF,EAAKG,MAAMH,EAAK1E,IACvBW,MAAOwC,GAAgBA,EAAa2B,KAAOJ,EAAKI,GAAK,CAAEC,YAAa,WAAc,CAAC,EACnFT,QAAS,kBAAM9B,GAASwC,EAAAA,EAAAA,GAAW,CAAEN,KAAMA,IAAQ,EAAC1D,SAEpC,SAAd0D,EAAKlB,MACH/C,EAAAA,EAAAA,KAACwE,EAAAA,EAAI,CACHjF,IAAK0E,EAAK1E,IACVC,MAAO,EACPC,KAAM,KAGRO,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CACTlF,IAAK0E,EAAK1E,IACVuB,QAAS,CAAClB,MAAM,GAAIO,OAAO,IAC3BY,SAAU,CAACnB,MAAM,GAAIO,OAAO,IAC5Bc,OAAQ,CAACQ,EAAG,EAAGE,EAAG,EAAGC,OAAOqC,EAAKrC,QACjCZ,MAAO,CAACS,EAAG,EAAGE,EAAG,GACjBlC,KAAM,CAACG,MAAO,EAAGO,OAAQ,MAlBD+D,EAqB1B,IAGR,CAAC,EAAG,EAAG,GAAGQ,SAAS9B,GACjBJ,GAAcA,EAAWkB,KAAI,SAACiB,EAAQT,GAAC,OACrClE,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YACbkE,MAAOQ,EAAOP,MAAMO,EAAOpF,IAC3BW,MAAOwC,GAAgBA,EAAa2B,KAAOM,EAAON,GAAK,CAAEC,YAAa,WAAc,CAAC,EACrFT,QAAS,kBAAM9B,GAASwC,EAAAA,EAAAA,GAAW,CAAEN,KAAMU,IAAU,EAACpE,UACtDP,EAAAA,EAAAA,KAACyE,EAAAA,EAAU,CACTlF,IAAKoF,EAAOpF,IACZuB,QAAS6D,EAAO7D,QAChBC,SAAU4D,EAAO5D,SACjBE,OAAQ0D,EAAO1D,OACfxB,KAAMkF,EAAOlF,QATeyE,EAW1B,IAGR,OAKd,C","sources":["containers/Map/Tile.js","containers/Map/TileObject.js","containers/Map/TilePallet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTilePoint } from 'lib/utility';\r\nimport _ from 'lodash';\r\n\r\nconst Tile = ({img, index, size, temp, reversal}) => {\r\n\tconst x = parseInt(index / 5);\r\n\tconst y = index % 5;\r\n\r\n  const width = 16*size;\r\n\tconst top = -(1+x*17)*size;\r\n  const left = -(1+y*17)*size\r\n\r\n  return (\r\n    <div className='tile' style={{ width, height:width, opacity: temp?0.5:1, transform: `scaleX(${reversal?-1:1})` }}>\r\n      <img style={{ top, left, width: 90*size, height: 130*size }}\r\n        src={`/WaktaMap/img/tile/${img}.png`}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Tile;","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTilePoint } from 'lib/utility';\r\nimport _ from 'lodash';\r\n\r\nconst TileObject = ({img, imgSize, tileSize, point, offset, size, temp, reversal}) => {\r\n  const xZoom = 16 / tileSize.width;\r\n  const yZoom = 16 / tileSize.height;\r\n\r\n\tconst imgSize_width = imgSize.width*xZoom;\r\n\tconst imgSize_height = imgSize.height*yZoom;\r\n\r\n\tconst tileSize_width = tileSize.width*xZoom;\r\n\tconst tileSize_height = tileSize.height*yZoom;\r\n\r\n\tconst point_x = point?.x ?? 0;\r\n\tconst point_y = point?.y ?? 0;\r\n\tconst size_width = size?.width ?? 1;\r\n\tconst size_height = size?.height ?? 1;\r\n\r\n  const width = size_width*tileSize_width;\r\n  const height = size_height*tileSize_height;\r\n  const left = -point_x*tileSize_width-offset.x*xZoom;\r\n\tconst top = -point_y*tileSize_height-offset.y*yZoom;\r\n  const rotate = offset?.rotate ?? 0;\r\n\r\n  return (\r\n    <div className='tile' style={{ width, height, opacity: temp?0.5:1, transform: `scaleX(${reversal?-1:1}) rotate(${rotate}deg)` }}>\r\n      <img style={{ top, left, width: imgSize_width, height: imgSize_height }}\r\n        src={`/WaktaMap/img/object/${img}.png`}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TileObject;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { onJSONDownload } from 'lib/utility';\r\nimport _ from 'lodash';\r\nimport Tile from './Tile';\r\nimport TileObject from './TileObject';\r\n\r\nimport { getMap } from 'store/MapList';\r\nimport { selectTile } from 'store/TilePallet';\r\n\r\nconst TilePallet = () => {\r\n  const fileInput = useRef(null);\r\n  const dispatch = useDispatch();\r\n  const selectedMap = useSelector(state => state.MapList.selectedMap);\r\n  const tileList = useSelector(state => state.TilePallet.tiles);\r\n  const objectList = useSelector(state => state.TilePallet.objects);\r\n  const selectedTile = useSelector(state => state.TilePallet.selected);\r\n  const selectedGridType = useSelector(state => state.MapList.selectedGridType);\r\n\r\n  const handleChangeFile = (e) => {\r\n    const file = e.target.files[0];\r\n\r\n    const reader = new FileReader();    \r\n    reader.onload = () => {\r\n      dispatch(getMap({ map: reader.result }));\r\n    };\r\n    reader.readAsText(file, /* optional */ \"utf-8\");\r\n  }\r\n\r\n  return (\r\n    <div className='tile_content'>\r\n      <div>\r\n        <input\r\n          ref={fileInput}\r\n          className=\"input\"\r\n          // files={[uploadFile]}\r\n          type='file'\r\n          accept='application/json'\r\n          onChange={handleChangeFile}\r\n          />\r\n        <button className=\"tile_button\" onClick={() => fileInput && fileInput.current && fileInput.current.click()}>불러오기</button>\r\n        <button className=\"tile_button\" onClick={() => onJSONDownload('export', selectedMap)}>내보내기</button>\r\n      </div>\r\n      <div className='tile_grid'>\r\n        { \r\n          selectedGridType === 0 ?\r\n            tileList && tileList.map((tile, i) => \r\n              <div className='tile_tile' key={i} \r\n                title={tile.name||tile.img}\r\n                style={selectedTile && selectedTile.id === tile.id ? { borderColor: '#f0e10c' } : {}}\r\n                onClick={() => dispatch(selectTile({ tile: tile }))}>\r\n                {\r\n                  tile.type === 'tile' ?\r\n                    <Tile\r\n                      img={tile.img}\r\n                      index={0}\r\n                      size={2}\r\n                      />\r\n                    :\r\n                    <TileObject\r\n                      img={tile.img}\r\n                      imgSize={{width:32, height:32}}\r\n                      tileSize={{width:16, height:16}}\r\n                      offset={{x: 0, y: 0, rotate:tile.rotate}}\r\n                      point={{x: 0, y: 0}}\r\n                      size={{width: 2, height: 2}}\r\n                      />\r\n                }\r\n              </div>\r\n            )\r\n            :\r\n            [1, 5, 6].includes(selectedGridType) ?\r\n              objectList && objectList.map((object, i) => \r\n                <div className='tile_tile' key={i} \r\n                  title={object.name||object.img}\r\n                  style={selectedTile && selectedTile.id === object.id ? { borderColor: '#f0e10c' } : {}}\r\n                  onClick={() => dispatch(selectTile({ tile: object }))}>\r\n                  <TileObject\r\n                    img={object.img}\r\n                    imgSize={object.imgSize}\r\n                    tileSize={object.tileSize}\r\n                    offset={object.offset}\r\n                    size={object.size}\r\n                    />\r\n                </div>\r\n              )\r\n              :\r\n              ''\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TilePallet;"],"names":["_ref","img","index","size","temp","reversal","width","top","parseInt","left","_jsx","className","style","height","opacity","transform","concat","children","src","_point$x","_point$y","_size$width","_size$height","_offset$rotate","imgSize","tileSize","point","offset","xZoom","yZoom","imgSize_width","imgSize_height","tileSize_width","tileSize_height","point_x","x","point_y","y","rotate","fileInput","useRef","dispatch","useDispatch","selectedMap","useSelector","state","MapList","tileList","TilePallet","tiles","objectList","objects","selectedTile","selected","selectedGridType","_jsxs","ref","type","accept","onChange","e","file","target","files","reader","FileReader","onload","getMap","map","result","readAsText","onClick","current","click","onJSONDownload","tile","i","title","name","id","borderColor","selectTile","Tile","TileObject","includes","object"],"sourceRoot":""}